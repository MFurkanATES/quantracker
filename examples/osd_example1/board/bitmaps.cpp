//Generated by OSDMaker

#include <quan/uav/osd/api.hpp>
#include <quan/uav/osd/basic_bitmap.hpp>

namespace {

 struct compass_arrow_type : quan::uav::osd::basic_bitmap{
    uint8_t const * get_data()const
    {
       return m_data;
    }
    quan::uav::osd::size_type get_size()const
    {
       return {39,48};
    }
 private:
    static constexpr uint8_t m_data[468] = {
      255, 255, 255, 255
      , 175, 254, 255, 255
      , 255, 255, 255, 255
      , 255, 255, 154, 255
      , 255, 255, 255, 255
      , 255, 255, 255, 191
      , 149, 255, 255, 255
      , 255, 255, 255, 255
      , 255, 107, 165, 255
      , 255, 255, 255, 255
      , 255, 255, 255, 86
      , 229, 255, 255, 255
      , 255, 255, 255, 255
      , 175, 85, 233, 255
      , 255, 255, 255, 255
      , 255, 255, 91, 81
      , 249, 255, 255, 255
      , 255, 255, 255, 191
      , 22, 80, 250, 255
      , 255, 255, 255, 255
      , 255, 111, 73, 88
      , 254, 255, 255, 255
      , 255, 255, 255, 155
      , 18, 154, 255, 255
      , 255, 255, 255, 255
      , 255, 170, 132, 234
      , 255, 255, 255, 255
      , 255, 255, 255, 47
      , 225, 255, 255, 255
      , 255, 255, 255, 255
      , 255, 75, 248, 255
      , 255, 255, 255, 255
      , 255, 255, 255, 18
      , 254, 255, 255, 255
      , 255, 255, 255, 255
      , 191, 132, 255, 255
      , 255, 255, 255, 255
      , 255, 255, 47, 225
      , 255, 255, 255, 255
      , 255, 255, 255, 255
      , 75, 248, 255, 255
      , 255, 255, 255, 255
      , 255, 255, 18, 254
      , 255, 255, 255, 255
      , 255, 255, 255, 191
      , 132, 255, 255, 255
      , 255, 255, 255, 255
      , 255, 47, 225, 255
      , 255, 255, 255, 255
      , 170, 255, 255, 74
      , 232, 255, 191, 234
      , 255, 171, 229, 255
      , 175, 85, 233, 255
      , 111, 169, 175, 86
      , 169, 170, 90, 106
      , 169, 170, 90, 165
      , 90, 21, 0, 0
      , 228, 111, 85, 85
      , 85, 149, 86, 85
      , 85, 85, 249, 27
      , 0, 0, 84, 165
      , 90, 165, 170, 106
      , 169, 165, 170, 106
      , 149, 250, 106, 249
      , 255, 107, 85, 250
      , 255, 91, 234, 255
      , 171, 254, 255, 43
      , 161, 255, 255, 170
      , 255, 255, 255, 255
      , 255, 75, 248, 255
      , 255, 255, 255, 255
      , 255, 255, 255, 18
      , 254, 255, 255, 255
      , 255, 255, 255, 255
      , 191, 132, 255, 255
      , 255, 255, 255, 255
      , 255, 255, 47, 225
      , 255, 255, 255, 255
      , 255, 255, 255, 255
      , 75, 248, 255, 255
      , 255, 255, 255, 255
      , 255, 255, 18, 254
      , 255, 255, 255, 255
      , 255, 255, 255, 191
      , 132, 255, 255, 255
      , 255, 255, 255, 255
      , 255, 47, 225, 255
      , 255, 255, 255, 255
      , 255, 255, 255, 75
      , 248, 255, 255, 255
      , 255, 255, 255, 255
      , 175, 18, 234, 255
      , 255, 255, 255, 255
      , 255, 191, 90, 68
      , 169, 255, 255, 255
      , 255, 255, 255, 107
      , 21, 81, 165, 255
      , 255, 255, 255, 255
      , 255, 86, 74, 104
      , 229, 255, 255, 255
      , 255, 255, 175, 165
      , 2, 106, 233, 255
      , 255, 255, 255, 255
      , 91, 186, 170, 107
      , 249, 255, 255, 255
      , 255, 255, 150, 255
      , 255, 91, 254, 255
      , 255, 255, 255, 191
      , 229, 255, 255, 150
      , 255, 255, 255, 255
      , 255, 175, 250, 255
      , 191, 234, 255, 255
      , 255, 255, 255, 255
      , 255, 255, 255, 255
      , 255, 255, 255, 255
      , 255, 255, 255, 255
      , 255, 255, 255, 255
      
      };
   } compass_arrow;
  constexpr uint8_t compass_arrow_type::m_data [ 468];

 struct home_arrow_type : quan::uav::osd::basic_bitmap{
    uint8_t const * get_data()const
    {
       return m_data;
    }
    quan::uav::osd::size_type get_size()const
    {
       return {15,55};
    }
 private:
    static constexpr uint8_t m_data[207] = {
      255, 191, 255, 255
      , 255, 171, 255, 255
      , 191, 162, 255, 255
      , 47, 224, 255, 255
      , 10, 232, 255, 191
      , 0, 248, 255, 43
      , 0, 250, 255, 2
      , 0, 254, 175, 0
      , 128, 254, 11, 0
      , 128, 191, 2, 0
      , 160, 47, 0, 0
      , 224, 11, 0, 0
      , 248, 170, 0, 168
      , 254, 47, 0, 254
      , 255, 11, 128, 255
      , 255, 2, 224, 255
      , 191, 0, 248, 255
      , 47, 0, 254, 255
      , 11, 128, 255, 255
      , 2, 224, 255, 191
      , 0, 248, 255, 47
      , 0, 254, 255, 11
      , 128, 255, 255, 2
      , 224, 255, 191, 0
      , 248, 255, 47, 0
      , 254, 255, 11, 128
      , 255, 255, 2, 224
      , 255, 191, 0, 248
      , 255, 47, 0, 254
      , 255, 11, 128, 255
      , 255, 2, 224, 255
      , 191, 0, 248, 255
      , 47, 0, 254, 255
      , 11, 128, 255, 255
      , 2, 224, 255, 191
      , 0, 248, 255, 47
      , 0, 254, 255, 11
      , 128, 255, 255, 2
      , 224, 255, 191, 0
      , 248, 255, 47, 0
      , 254, 255, 11, 128
      , 255, 191, 2, 160
      , 255, 47, 0, 224
      , 255, 11, 0, 248
      , 191, 2, 0, 250
      , 47, 0, 0, 254
      , 10, 0, 128, 190
      , 0, 8, 128, 43
      , 128, 10, 160, 2
      , 234, 42, 160, 170
      , 255, 171, 250, 255
      , 255, 255, 255
      };
   } home_arrow;
  constexpr uint8_t home_arrow_type::m_data [ 207];

 struct home_image_type : quan::uav::osd::basic_bitmap{
    uint8_t const * get_data()const
    {
       return m_data;
    }
    quan::uav::osd::size_type get_size()const
    {
       return {20,19};
    }
 private:
    static constexpr uint8_t m_data[95] = {
      255, 255, 235, 255
      , 255, 255, 191, 150
      , 254, 255, 255, 107
      , 105, 233, 255, 191
      , 150, 150, 150, 254
      , 107, 105, 85, 105
      , 233, 150, 86, 85
      , 149, 150, 106, 85
      , 85, 85, 169, 111
      , 85, 149, 170, 249
      , 111, 85, 149, 128
      , 249, 111, 169, 154
      , 128, 249, 111, 9
      , 152, 128, 249, 111
      , 9, 152, 128, 249
      , 111, 9, 152, 170
      , 249, 111, 9, 88
      , 85, 249, 111, 9
      , 88, 85, 249, 111
      , 9, 88, 85, 249
      , 111, 9, 88, 85
      , 249, 111, 9, 88
      , 85, 249, 175, 170
      , 170, 170, 250
      };
   } home_image;
  constexpr uint8_t home_image_type::m_data [ 95];

 struct satellite_image_type : quan::uav::osd::basic_bitmap{
    uint8_t const * get_data()const
    {
       return m_data;
    }
    quan::uav::osd::size_type get_size()const
    {
       return {15,19};
    }
 private:
    static constexpr uint8_t m_data[72] = {
      175, 234, 255, 255
      , 90, 233, 175, 175
      , 169, 229, 150, 91
      , 170, 166, 229, 150
      , 170, 150, 190, 165
      , 170, 165, 111, 165
      , 154, 166, 107, 165
      , 169, 230, 91, 165
      , 170, 233, 91, 165
      , 170, 249, 91, 165
      , 106, 254, 91, 165
      , 154, 255, 86, 85
      , 233, 191, 101, 149
      , 254, 107, 169, 234
      , 191, 86, 249, 255
      , 106, 85, 169, 191
      , 85, 85, 229, 175
      , 170, 170, 250, 255
      
      };
   } satellite_image;
  constexpr uint8_t satellite_image_type::m_data [ 72];

 struct altitude_symbol_type : quan::uav::osd::basic_bitmap{
    uint8_t const * get_data()const
    {
       return m_data;
    }
    quan::uav::osd::size_type get_size()const
    {
       return {21,18};
    }
 private:
    static constexpr uint8_t m_data[95] = {
      255, 175, 170, 254
      , 255, 255, 175, 85
      , 249, 255, 255, 191
      , 165, 150, 255, 255
      , 255, 86, 85, 254
      , 255, 255, 91, 106
      , 249, 255, 255, 191
      , 170, 250, 255, 255
      , 255, 91, 254, 255
      , 255, 255, 111, 249
      , 255, 255, 255, 191
      , 165, 250, 255, 255
      , 255, 86, 149, 255
      , 255, 255, 91, 85
      , 254, 255, 255, 191
      , 170, 234, 255, 255
      , 255, 91, 85, 254
      , 255, 255, 111, 85
      , 249, 255, 255, 255
      , 90, 250, 255, 255
      , 255, 111, 249, 255
      , 255, 255, 191, 229
      , 255, 255, 255, 255
      , 235, 255, 255
      };
   } altitude_symbol;
  constexpr uint8_t altitude_symbol_type::m_data [ 95];

 constexpr quan::uav::osd::bitmap_ptr bitmap_array[] =
   {
    &compass_arrow
    ,&home_arrow
    ,&home_image
    ,&satellite_image
    ,&altitude_symbol
   };
} // namespace

quan::uav::osd::bitmap_ptr
quan::uav::osd::get_bitmap(uint32_t id)
{
constexpr uint32_t size = sizeof(bitmap_array)/sizeof(quan::uav::osd::bitmap_ptr);
  if ( id < size){
     return bitmap_array[id];
  }else{
     return nullptr;
  }
}
